NativeTask is a task level native runtime & API for hadoop mapreduce.

Most of code is written using C++, and then wrapped using JNI, so java side can call NativeTask directly, rather than using other IPC mechanisms like sockets/pipes in Pipes or streaming. But NativeTask isn't just another "stremaing/pipes", it has(or will have) more features:

1. Some performance bottlenecks are optimized using native code, such as sort,spill,merge;
2. Support no sort, by disable sort, the reduce side shuffle/merge stage barrier can be eliminated;
3. Support foldl style hash aggregation, hash->foldl style data flow and API vs sort(merge)->reduce;
4. Pure native task, after protobuff based HDFS client is OK, the native side can read input and write output to HDFS directly, so the java side is probably not needed anymore.

I think this work can help improving hadoop in many ways:

1. Reduce total resource consumption, mainly CPU
2. Speed up job execution, better query performance & response time
3. More programming interface and library choice, c/cpp, python, etc.
4. Opens up further optimization possibility.

In fact I hope to open another project after this project can work, which is an utility/tool to compile query plan(like in Hive) to native code directly using LLVM(of course), and run it on nativetask. I think this will make Hadoop much faster to run ETL/OLAP kind workloads.
This project is in very early stages currently.

Demo and some early test results in Hadoop JIRA:
https://issues.apache.org/jira/browse/MAPREDUCE-2841
